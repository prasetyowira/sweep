// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/prasetyowira/sweep/internal/app/sweep/product/productadapter/ent/product"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	uid        *string
	sku        *string
	name       *string
	expirable  *bool
	is_deleted *bool
	deleted_at *time.Time
	created_at *time.Time
	updated_at *time.Time
}

// SetUID sets the uid field.
func (pc *ProductCreate) SetUID(s string) *ProductCreate {
	pc.uid = &s
	return pc
}

// SetSku sets the sku field.
func (pc *ProductCreate) SetSku(s string) *ProductCreate {
	pc.sku = &s
	return pc
}

// SetName sets the name field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.name = &s
	return pc
}

// SetExpirable sets the expirable field.
func (pc *ProductCreate) SetExpirable(b bool) *ProductCreate {
	pc.expirable = &b
	return pc
}

// SetNillableExpirable sets the expirable field if the given value is not nil.
func (pc *ProductCreate) SetNillableExpirable(b *bool) *ProductCreate {
	if b != nil {
		pc.SetExpirable(*b)
	}
	return pc
}

// SetIsDeleted sets the is_deleted field.
func (pc *ProductCreate) SetIsDeleted(b bool) *ProductCreate {
	pc.is_deleted = &b
	return pc
}

// SetNillableIsDeleted sets the is_deleted field if the given value is not nil.
func (pc *ProductCreate) SetNillableIsDeleted(b *bool) *ProductCreate {
	if b != nil {
		pc.SetIsDeleted(*b)
	}
	return pc
}

// SetDeletedAt sets the deleted_at field.
func (pc *ProductCreate) SetDeletedAt(t time.Time) *ProductCreate {
	pc.deleted_at = &t
	return pc
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (pc *ProductCreate) SetNillableDeletedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetCreatedAt sets the created_at field.
func (pc *ProductCreate) SetCreatedAt(t time.Time) *ProductCreate {
	pc.created_at = &t
	return pc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the updated_at field.
func (pc *ProductCreate) SetUpdatedAt(t time.Time) *ProductCreate {
	pc.updated_at = &t
	return pc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	if pc.uid == nil {
		return nil, errors.New("ent: missing required field \"uid\"")
	}
	if err := product.UIDValidator(*pc.uid); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"uid\": %v", err)
	}
	if pc.sku == nil {
		return nil, errors.New("ent: missing required field \"sku\"")
	}
	if err := product.SkuValidator(*pc.sku); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"sku\": %v", err)
	}
	if pc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if err := product.NameValidator(*pc.name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
	}
	if pc.expirable == nil {
		v := product.DefaultExpirable
		pc.expirable = &v
	}
	if pc.is_deleted == nil {
		v := product.DefaultIsDeleted
		pc.is_deleted = &v
	}
	if pc.created_at == nil {
		v := product.DefaultCreatedAt()
		pc.created_at = &v
	}
	if pc.updated_at == nil {
		v := product.DefaultUpdatedAt()
		pc.updated_at = &v
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	var (
		pr    = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		}
	)
	if value := pc.uid; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: product.FieldUID,
		})
		pr.UID = *value
	}
	if value := pc.sku; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: product.FieldSku,
		})
		pr.Sku = *value
	}
	if value := pc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: product.FieldName,
		})
		pr.Name = *value
	}
	if value := pc.expirable; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: product.FieldExpirable,
		})
		pr.Expirable = *value
	}
	if value := pc.is_deleted; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: product.FieldIsDeleted,
		})
		pr.IsDeleted = *value
	}
	if value := pc.deleted_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: product.FieldDeletedAt,
		})
		pr.DeletedAt = value
	}
	if value := pc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: product.FieldCreatedAt,
		})
		pr.CreatedAt = *value
	}
	if value := pc.updated_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: product.FieldUpdatedAt,
		})
		pr.UpdatedAt = *value
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}
